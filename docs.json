[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [
      {
        "def": "YTMusic:bindHotKeys(table)",
        "desc": "The method accepts a single parameter, which is a table. The keys of the table",
        "doc": "The method accepts a single parameter, which is a table. The keys of the table\nare strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    next = {{\"cmd\", \"alt\"}, \"right\"},\n    play = {{\"cmd\", \"alt\"}, \"space\"},\n    previous = {{\"cmd\", \"alt\"}, \"left\"},\n    skipAhead = {{\"cmd\", \"alt\", \"shift\"}, \"right\"},\n    skipBack = {{\"cmd\", \"alt\", \"shift\"}, \"left\"},\n    mute = {{\"cmd\", \"alt\"}, \"m\"},\n    volumeUp = {{\"cmd\", \"alt\"}, \"+\"},\n    volumeDown = {{\"cmd\", \"alt\"}, \"=\"},\n   }\n\n\nParameters:\n * table - Table of action to key mappings\n\nReturns:\n * YTMusic object",
        "name": "bindHotKeys",
        "parameters": [
          " * table - Table of action to key mappings"
        ],
        "returns": [
          " * YTMusic object"
        ],
        "signature": "YTMusic:bindHotKeys(table)",
        "stripped_doc": "are strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    next = {{\"cmd\", \"alt\"}, \"right\"},\n    play = {{\"cmd\", \"alt\"}, \"space\"},\n    previous = {{\"cmd\", \"alt\"}, \"left\"},\n    skipAhead = {{\"cmd\", \"alt\", \"shift\"}, \"right\"},\n    skipBack = {{\"cmd\", \"alt\", \"shift\"}, \"left\"},\n    mute = {{\"cmd\", \"alt\"}, \"m\"},\n    volumeUp = {{\"cmd\", \"alt\"}, \"+\"},\n    volumeDown = {{\"cmd\", \"alt\"}, \"=\"},\n   }",
        "type": "Function"
      },
      {
        "def": "YTMusic:debug(enable)",
        "desc": "Enable or disable debugging",
        "doc": "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "name": "debug",
        "parameters": [
          " * enable - Boolean indicating whether debugging should be on"
        ],
        "returns": [
          " * Nothing"
        ],
        "signature": "YTMusic:debug(enable)",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:init()",
        "desc": "Initializes a YTMusic",
        "doc": "Initializes a YTMusic\n\nParameters:\n * None\n\nReturns:\n * YTMusic object",
        "name": "init",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * YTMusic object"
        ],
        "signature": "YTMusic:init()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:nextTrack()",
        "desc": "Advance to next track.",
        "doc": "Advance to next track.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "nextTrack",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:nextTrack()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:playPause()",
        "desc": "Play or pause.",
        "doc": "Play or pause.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "playPause",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:playPause()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:postEvent",
        "desc": "Post the event hs.eventtap.event to the YTMusic application.",
        "doc": "Post the event hs.eventtap.event to the YTMusic application.\n\nParameters:\n* event: hs.eventtap.event to post\n\nReturns:\n* Nothing",
        "name": "postEvent",
        "parameters": [
          "* event: hs.eventtap.event to post"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:postEvent",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:previousTrack()",
        "desc": "Rewind to begining of current track or previous track if already at begining of",
        "doc": "Rewind to begining of current track or previous track if already at begining of\ncurrent track.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "previousTrack",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:previousTrack()",
        "stripped_doc": "current track.",
        "type": "Function"
      },
      {
        "def": "YTMusic:skipAhead()",
        "desc": "Skip ahead 10 seconds.",
        "doc": "Skip ahead 10 seconds.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "skipAhead",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:skipAhead()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:skipBack()",
        "desc": "Skip back 10 seconds.",
        "doc": "Skip back 10 seconds.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "skipBack",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:skipBack()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:toggleMute()",
        "desc": "Toggle the mute state of the application.",
        "doc": "Toggle the mute state of the application.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "toggleMute",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:toggleMute()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:volumeDown()",
        "desc": "Decrease the volume in the app.",
        "doc": "Decrease the volume in the app.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "volumeDown",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:volumeDown()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:volumeUp()",
        "desc": "Increase the volume in the app.",
        "doc": "Increase the volume in the app.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "volumeUp",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:volumeUp()",
        "stripped_doc": "",
        "type": "Function"
      }
    ],
    "Method": [],
    "Variable": [],
    "desc": "Works by sending key events to the app, so if the user interface changes,",
    "doc": "Works by sending key events to the app, so if the user interface changes,\nthat will break this app.\n\nTo see all the keyboard shortcuts that YTMusic.app has, use '?' in the app.",
    "items": [
      {
        "def": "YTMusic:bindHotKeys(table)",
        "desc": "The method accepts a single parameter, which is a table. The keys of the table",
        "doc": "The method accepts a single parameter, which is a table. The keys of the table\nare strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    next = {{\"cmd\", \"alt\"}, \"right\"},\n    play = {{\"cmd\", \"alt\"}, \"space\"},\n    previous = {{\"cmd\", \"alt\"}, \"left\"},\n    skipAhead = {{\"cmd\", \"alt\", \"shift\"}, \"right\"},\n    skipBack = {{\"cmd\", \"alt\", \"shift\"}, \"left\"},\n    mute = {{\"cmd\", \"alt\"}, \"m\"},\n    volumeUp = {{\"cmd\", \"alt\"}, \"+\"},\n    volumeDown = {{\"cmd\", \"alt\"}, \"=\"},\n   }\n\n\nParameters:\n * table - Table of action to key mappings\n\nReturns:\n * YTMusic object",
        "name": "bindHotKeys",
        "parameters": [
          " * table - Table of action to key mappings"
        ],
        "returns": [
          " * YTMusic object"
        ],
        "signature": "YTMusic:bindHotKeys(table)",
        "stripped_doc": "are strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    next = {{\"cmd\", \"alt\"}, \"right\"},\n    play = {{\"cmd\", \"alt\"}, \"space\"},\n    previous = {{\"cmd\", \"alt\"}, \"left\"},\n    skipAhead = {{\"cmd\", \"alt\", \"shift\"}, \"right\"},\n    skipBack = {{\"cmd\", \"alt\", \"shift\"}, \"left\"},\n    mute = {{\"cmd\", \"alt\"}, \"m\"},\n    volumeUp = {{\"cmd\", \"alt\"}, \"+\"},\n    volumeDown = {{\"cmd\", \"alt\"}, \"=\"},\n   }",
        "type": "Function"
      },
      {
        "def": "YTMusic:debug(enable)",
        "desc": "Enable or disable debugging",
        "doc": "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "name": "debug",
        "parameters": [
          " * enable - Boolean indicating whether debugging should be on"
        ],
        "returns": [
          " * Nothing"
        ],
        "signature": "YTMusic:debug(enable)",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:init()",
        "desc": "Initializes a YTMusic",
        "doc": "Initializes a YTMusic\n\nParameters:\n * None\n\nReturns:\n * YTMusic object",
        "name": "init",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * YTMusic object"
        ],
        "signature": "YTMusic:init()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:nextTrack()",
        "desc": "Advance to next track.",
        "doc": "Advance to next track.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "nextTrack",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:nextTrack()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:playPause()",
        "desc": "Play or pause.",
        "doc": "Play or pause.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "playPause",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:playPause()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:postEvent",
        "desc": "Post the event hs.eventtap.event to the YTMusic application.",
        "doc": "Post the event hs.eventtap.event to the YTMusic application.\n\nParameters:\n* event: hs.eventtap.event to post\n\nReturns:\n* Nothing",
        "name": "postEvent",
        "parameters": [
          "* event: hs.eventtap.event to post"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:postEvent",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:previousTrack()",
        "desc": "Rewind to begining of current track or previous track if already at begining of",
        "doc": "Rewind to begining of current track or previous track if already at begining of\ncurrent track.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "previousTrack",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:previousTrack()",
        "stripped_doc": "current track.",
        "type": "Function"
      },
      {
        "def": "YTMusic:skipAhead()",
        "desc": "Skip ahead 10 seconds.",
        "doc": "Skip ahead 10 seconds.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "skipAhead",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:skipAhead()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:skipBack()",
        "desc": "Skip back 10 seconds.",
        "doc": "Skip back 10 seconds.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "skipBack",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:skipBack()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:toggleMute()",
        "desc": "Toggle the mute state of the application.",
        "doc": "Toggle the mute state of the application.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "toggleMute",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:toggleMute()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:volumeDown()",
        "desc": "Decrease the volume in the app.",
        "doc": "Decrease the volume in the app.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "volumeDown",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:volumeDown()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "YTMusic:volumeUp()",
        "desc": "Increase the volume in the app.",
        "doc": "Increase the volume in the app.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "volumeUp",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "YTMusic:volumeUp()",
        "stripped_doc": "",
        "type": "Function"
      }
    ],
    "name": "YTMusic",
    "stripped_doc": "that will break this app.\n\nTo see all the keyboard shortcuts that YTMusic.app has, use '?' in the app.",
    "submodules": [],
    "type": "Module"
  }
]